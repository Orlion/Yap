Terminals unused in grammar

   FUNCTION
   IF
   ELSE
   ELSEIF
   WHILE
   FOR
   RETURN_T
   BREAK
   CONTINUE
   NULL_T
   LP
   RP
   LC
   RC
   COMMA
   LOGICAL_AND
   LOGICAL_OR
   EQ
   NE
   GT
   GE
   LT
   LE
   MOD
   TRUE_T
   FALSE_T
   GLOBAL_T


State 15 conflicts: 2 shift/reduce


Grammar

    0 $accept: statement $end

    1 statement: expression SEMICOLON

    2 expression: term
    3           | expression ADD term
    4           | expression SUB term
    5           | IDENTIFIER ASSIGN expression

    6 term: primary_expression
    7     | term MUL primary_expression
    8     | term DIV primary_expression

    9 primary_expression: IDENTIFIER
   10                   | INT_LITERAL
   11                   | DOUBLE_LITERAL


Terminals, with rules where they appear

$end (0) 0
error (256)
INT_LITERAL (258) 10
DOUBLE_LITERAL (259) 11
IDENTIFIER (260) 5 9
FUNCTION (261)
IF (262)
ELSE (263)
ELSEIF (264)
WHILE (265)
FOR (266)
RETURN_T (267)
BREAK (268)
CONTINUE (269)
NULL_T (270)
LP (271)
RP (272)
LC (273)
RC (274)
SEMICOLON (275) 1
COMMA (276)
ASSIGN (277) 5
LOGICAL_AND (278)
LOGICAL_OR (279)
EQ (280)
NE (281)
GT (282)
GE (283)
LT (284)
LE (285)
ADD (286) 3
SUB (287) 4
MUL (288) 7
DIV (289) 8
MOD (290)
TRUE_T (291)
FALSE_T (292)
GLOBAL_T (293)


Nonterminals, with rules where they appear

$accept (39)
    on left: 0
statement (40)
    on left: 1, on right: 0
expression (41)
    on left: 2 3 4 5, on right: 1 3 4 5
term (42)
    on left: 6 7 8, on right: 2 3 4 7 8
primary_expression (43)
    on left: 9 10 11, on right: 6 7 8


state 0

    0 $accept: . statement $end

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    IDENTIFIER      shift, and go to state 3

    statement           go to state 4
    expression          go to state 5
    term                go to state 6
    primary_expression  go to state 7


state 1

   10 primary_expression: INT_LITERAL .

    $default  reduce using rule 10 (primary_expression)


state 2

   11 primary_expression: DOUBLE_LITERAL .

    $default  reduce using rule 11 (primary_expression)


state 3

    5 expression: IDENTIFIER . ASSIGN expression
    9 primary_expression: IDENTIFIER .

    ASSIGN  shift, and go to state 8

    $default  reduce using rule 9 (primary_expression)


state 4

    0 $accept: statement . $end

    $end  shift, and go to state 9


state 5

    1 statement: expression . SEMICOLON
    3 expression: expression . ADD term
    4           | expression . SUB term

    SEMICOLON  shift, and go to state 10
    ADD        shift, and go to state 11
    SUB        shift, and go to state 12


state 6

    2 expression: term .
    7 term: term . MUL primary_expression
    8     | term . DIV primary_expression

    MUL  shift, and go to state 13
    DIV  shift, and go to state 14

    $default  reduce using rule 2 (expression)


state 7

    6 term: primary_expression .

    $default  reduce using rule 6 (term)


state 8

    5 expression: IDENTIFIER ASSIGN . expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    IDENTIFIER      shift, and go to state 3

    expression          go to state 15
    term                go to state 6
    primary_expression  go to state 7


state 9

    0 $accept: statement $end .

    $default  accept


state 10

    1 statement: expression SEMICOLON .

    $default  reduce using rule 1 (statement)


state 11

    3 expression: expression ADD . term

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    IDENTIFIER      shift, and go to state 16

    term                go to state 17
    primary_expression  go to state 7


state 12

    4 expression: expression SUB . term

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    IDENTIFIER      shift, and go to state 16

    term                go to state 18
    primary_expression  go to state 7


state 13

    7 term: term MUL . primary_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    IDENTIFIER      shift, and go to state 16

    primary_expression  go to state 19


state 14

    8 term: term DIV . primary_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    IDENTIFIER      shift, and go to state 16

    primary_expression  go to state 20


state 15

    3 expression: expression . ADD term
    4           | expression . SUB term
    5           | IDENTIFIER ASSIGN expression .

    ADD  shift, and go to state 11
    SUB  shift, and go to state 12

    ADD       [reduce using rule 5 (expression)]
    SUB       [reduce using rule 5 (expression)]
    $default  reduce using rule 5 (expression)


state 16

    9 primary_expression: IDENTIFIER .

    $default  reduce using rule 9 (primary_expression)


state 17

    3 expression: expression ADD term .
    7 term: term . MUL primary_expression
    8     | term . DIV primary_expression

    MUL  shift, and go to state 13
    DIV  shift, and go to state 14

    $default  reduce using rule 3 (expression)


state 18

    4 expression: expression SUB term .
    7 term: term . MUL primary_expression
    8     | term . DIV primary_expression

    MUL  shift, and go to state 13
    DIV  shift, and go to state 14

    $default  reduce using rule 4 (expression)


state 19

    7 term: term MUL primary_expression .

    $default  reduce using rule 7 (term)


state 20

    8 term: term DIV primary_expression .

    $default  reduce using rule 8 (term)
